/// <reference types="node" />
import { Writable, WritableOptions } from "stream";
export interface KeywordOptions {
    filePath: string;
    sensitivity: number;
}
declare type KeywordSpec = string | KeywordOptions;
declare class Porcupine {
    constructor(moduleFilePath: string, keywords: KeywordSpec | KeywordSpec[]);
    destroy(): void;
    process(pcm: Buffer): boolean | number;
}
declare type PorcupineModule = {
    Porcupine: typeof Porcupine;
    version(): string;
    sampleRate(): number;
    frameLength(): number;
};
declare const porcupine: PorcupineModule;
export default porcupine;
interface PorcupineStreamOptions extends WritableOptions {
    moduleFilePath: string;
    keywords: KeywordSpec | KeywordSpec[];
}
export declare class PorcupineStream extends Writable {
    private porcupine;
    private buffer;
    private bufferLength;
    private frameSize;
    constructor(options: PorcupineStreamOptions);
    _write(chunk: any, encoding: string, callback: (err?: Error) => void): void;
    _destroy(err: Error | null, callback: (err?: Error) => void): void;
}
export interface PorcupineStream extends Writable {
    addListener(event: string, listener: (...args: any[]) => void): this;
    addListener(event: "keyword", listener: (chunk: Buffer, keyword: number) => void): this;
    emit(event: string | symbol, ...args: any[]): boolean;
    emit(event: "keyword", chunk: Buffer, keyword: number): boolean;
    on(event: string, listener: (...args: any[]) => void): this;
    on(event: "keyword", listener: (chunk: Buffer, keyword: number) => void): this;
    once(event: string, listener: (...args: any[]) => void): this;
    once(event: "keyword", listener: (chunk: Buffer, keyword: number) => void): this;
    prependListener(event: string, listener: (...args: any[]) => void): this;
    prependListener(event: "keyword", listener: (chunk: Buffer, keyword: number) => void): this;
    prependOnceListener(event: string, listener: (...args: any[]) => void): this;
    prependOnceListener(event: "keyword", listener: (chunk: Buffer, keyword: number) => void): this;
    removeListener(event: string, listener: (...args: any[]) => void): this;
    removeListener(event: "keyword", listener: (chunk: Buffer, keyword: number) => void): this;
}
